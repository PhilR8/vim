" Reload this file when off of TU network:
" https://superuser.com/questions/132029/how-do-you-reload-your-vimrc-file-without-restarting-vim
" :so %
" :set background=dark
" so is short for 'source' and % is current file.  Loads file contents as
" vimscript.

" some settings for coc.nvim
set hidden
set nobackup
set nowritebackup
set updatetime=300
set shortmess+=c

set nocompatible

" do not add newlines at end of file - current devteam request
set nofixendofline

" easily load vimrc to edit (\v)
map <leader>v :tabedit $MYVIMRC<CR>

" enable spell check for markdown and txt files
autocmd BufRead,BufNewFile *.txt,*.md setlocal spell

" remap Escape to jk
inoremap jk <ESC>

" disable swap files
set noswapfile

" tab settings
" use tab and display it as four spaces wide.
" NOTE - it's the actual tab character - it is not four spaces.
set tabstop=4
set shiftwidth=4

" caseless searching
set ignorecase

set listchars=eol:$,tab:>-,trail:~,extends:>,precedes:<

if has("gui_running")
	" Vundle settings
	set nocompatible
	filetype off

	" set the runtime path to include Vundle and initialize
	set rtp+=C:/users/preese/.vim/bundle/Vundle.vim/
	let path='C:/users/preese/.vim/bundle'
	call vundle#begin(path)
	" let Vundle manage Vundle, required
	Plugin 'gmarik/Vundle.vim'
	" Keep plugin commands between vundle#begin/end.
	Plugin 'altercation/vim-colors-solarized'
	Plugin 'Shutnik/jshint2.vim'
	Plugin 'scrooloose/nerdcommenter'
	Plugin 'bling/vim-airline'
	Plugin 'nathanaelkane/vim-indent-guides'
	Plugin 'tpope/vim-sensible'
	Plugin 'groenewege/vim-less'
	Plugin 'othree/yajs.vim'
	Plugin 'kien/ctrlp.vim'
	Plugin 'mbbill/undotree'
	Plugin 'Raimondi/delimitMate'
	Plugin 'tpope/vim-fugitive'
	Plugin 'elzr/vim-json'
	Plugin 'mhinz/vim-signify'
	Plugin 'KabbAmine/zeavim.vim'
	Plugin 'editorconfig/editorconfig-vim'
	Plugin 'tpope/vim-jdaddy' " JSON manipulation/pretty printing
	Plugin 'tpope/vim-markdown'
	Plugin 'briancollins/vim-jst' " template syntax highlighting
	Plugin 'tpope/vim-vinegar' " enhanced netrw
	Plugin 'drmikehenry/vim-fontsize' " adjust font size <leader><leader>+/-
	Plugin 'pangloss/vim-javascript'
	Plugin 'mxw/vim-jsx'
	Plugin 'tpope/vim-surround'
	Plugin 'neoclide/coc.nvim'
	Plugin 'chemzqm/vim-jsx-improve'

	" All plugins must be added before the following line
	call vundle#end()
	filetype plugin indent on

	" tab labels
	set showtabline=2 " always show tabs in gvim, but not vim
	" set up tab labels with tab number, buffer name, number of windows
	function! GuiTabLabel()
	  let label = ''
	  let bufnrlist = tabpagebuflist(v:lnum)
	  " Add '+' if one of the buffers in the tab page is modified
	  for bufnr in bufnrlist
		if getbufvar(bufnr, "&modified")
		  let label = '+'
		  break
		endif
	  endfor
	  " Append the tab number
	  let label .= v:lnum.': '
	  " Append the buffer name
	  let name = bufname(bufnrlist[tabpagewinnr(v:lnum) - 1])
	  if name == ''
		" give a name to no-name documents
		if &buftype=='quickfix'
		  let name = '[Quickfix List]'
		else
		  let name = '[No Name]'
		endif
	  else
		" get only the file name
		let name = fnamemodify(name,":t")
	  endif
	  let label .= name
	  " Append the number of windows in the tab page
	  let wincount = tabpagewinnr(v:lnum, '$')
	  return label . '  [' . wincount . ']'
	endfunction
	set guitablabel=%{GuiTabLabel()}

	" set current workspace to :Explore
	map <F2> :cd %:p:h

	" Toggle undotree
	nnoremap <F5> :UndotreeToggle<CR>

	if has("persistent_undo")
		set undodir=C:\users\preese\.vim\undo
		set undofile
	endif

		" remove whitespace
		map <F10> :%s/\s\+$//

		" closetag filetypes
		let g:closetag_filenames = "*.html,*.html,*.ejs,*.cshtml,*.xml"

		" delimitMate binding
		imap <C-c> <CR><Esc>O

		" vim-json - disable double-quote concealing
		let g:vim_json_syntax_conceal = 0

		set lines=50 columns=100
		set number

	" Fonts
	"set guifont=Lucida_Sans_Typewriter:h10:cANSI
	set guifont=Consolas:h12

		set encoding=utf-8
		set fileencodings=utf-8

		set linespace=2

	" Color scheme
		colorscheme solarized

		" js library syntax
		let g:used_javascript_libs = "underscore,backbone,jquery"

		" airline customizations
		let g:airline#extensions#tabline#left_sep = ' '
		let g:airline#extensions#tabline#left_alt_sep = '|'
		let g:airline#extensions#tabline#enabled = 1
		let g:airline#extensions#tabline#buffer_nr_show = 1
		let g:airline_section_error = '%{airline#util#wrap(airline#extensions#coc#get_error(),0)}'
		let g:airline_section_warning = '%{airline#util#wrap(airline#extensions#coc#get_warning(),0)}'

		" jsDoc.vim configuration
		let g:jsdoc_allow_input_prompt = 1 " allow prompt for interactive input
		let g:jsdoc_input_description = 1 " prompt for function description
		let g:jsdoc_access_descriptions = 2
		let g:jsdoc_underscore_private = 1 " detect underscore starting functions as private
		let g:jsdoc_additional_descriptions = 1 " add @name and @function

		nmap <silent> <C-l> <Plug>(jsdoc)

		" vim-signify
		let g:signify_vcs_list = [ 'git' ]

	" alias repos folder
	let $repos = "C:\\users\\preese\\repos"

	" ------  coc functions ---------------------------------

	" Use tab for trigger completion with characters ahead and navigate.
	" Use command ':verbose imap <tab>' to make sure tab is not mapped by other plugin.
	inoremap <silent><expr> <TAB>
		  \ pumvisible() ? "\<C-n>" :
		  \ <SID>check_back_space() ? "\<TAB>" :
		  \ coc#refresh()
	inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

	function! s:check_back_space() abort
	  let col = col('.') - 1
	  return !col || getline('.')[col - 1]  =~# '\s'
	endfunction

	" Use <c-space> to trigger completion.
	inoremap <silent><expr> <c-space> coc#refresh()

	" Use <cr> to confirm completion, `<C-g>u` means break undo chain at current position.
	" Coc only does snippet and additional edit on confirm.
	inoremap <expr> <cr> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"

	" Use `[c` and `]c` to navigate diagnostics
	nmap <silent> [c <Plug>(coc-diagnostic-prev)
	nmap <silent> ]c <Plug>(coc-diagnostic-next)

	" Remap keys for gotos
	nmap <silent> gd <Plug>(coc-definition)
	nmap <silent> gy <Plug>(coc-type-definition)
	nmap <silent> gi <Plug>(coc-implementation)
	nmap <silent> gr <Plug>(coc-references)

	" Use K to show documentation in preview window
	nnoremap <silent> K :call <SID>show_documentation()<CR>

	function! s:show_documentation()
	  if (index(['vim','help'], &filetype) >= 0)
		execute 'h '.expand('<cword>')
	  else
		call CocAction('doHover')
	  endif
	endfunction

	" Highlight symbol under cursor on CursorHold
	autocmd CursorHold * silent call CocActionAsync('highlight')

	" Remap for rename current word
	nmap <leader>rn <Plug>(coc-rename)

	" Remap for format selected region
	xmap <leader>f  <Plug>(coc-format-selected)
	nmap <leader>f  <Plug>(coc-format-selected)

	augroup mygroup
	  autocmd!
	  " Setup formatexpr specified filetype(s).
	  autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')
	  " Update signature help on jump placeholder
	  autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
	augroup end

	" Remap for do codeAction of selected region, ex: `<leader>aap` for current paragraph
	xmap <leader>a  <Plug>(coc-codeaction-selected)
	nmap <leader>a  <Plug>(coc-codeaction-selected)

	" Remap for do codeAction of current line
	nmap <leader>ac  <Plug>(coc-codeaction)
	" Fix autofix problem of current line
	nmap <leader>qf  <Plug>(coc-fix-current)

	" Use `:Format` to format current buffer
	command! -nargs=0 Format :call CocAction('format')

	" Use `:Fold` to fold current buffer
	command! -nargs=? Fold :call     CocAction('fold', <f-args>)

	" Using CocList
	" Show all diagnostics
	nnoremap <silent> <space>a  :<C-u>CocList diagnostics<cr>
	" Manage extensions
	nnoremap <silent> <space>e  :<C-u>CocList extensions<cr>
	" Show commands
	nnoremap <silent> <space>c  :<C-u>CocList commands<cr>
	" Find symbol of current document
	nnoremap <silent> <space>o  :<C-u>CocList outline<cr>
	" Search workspace symbols
	nnoremap <silent> <space>s  :<C-u>CocList -I symbols<cr>
	" Do default action for next item.
	nnoremap <silent> <space>j  :<C-u>CocNext<CR>
	" Do default action for previous item.
	nnoremap <silent> <space>k  :<C-u>CocPrev<CR>
	" Resume latest coc list
	nnoremap <silent> <space>p  :<C-u>CocListResume<CR>

	" ------ end coc functions ---------------------------------
endif
