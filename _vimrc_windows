" Reload this file when off of TU network:
" https://superuser.com/questions/132029/how-do-you-reload-your-vimrc-file-without-restarting-vim
" :so %
" :set background=dark
" so is short for 'source' and % is current file.  Loads file contents as
" vimscript.

set nocompatible

" easily load vimrc to edit (\v)
map <leader>v :tabedit $MYVIMRC<CR>

" enable spell check for markdown and txt files
autocmd BufRead,BufNewFile *.txt,*.md setlocal spell

" remap Escape to jk
inoremap jk <ESC>

" set backupfile location
set backupdir=C:/users/preese/.vim/backup//

" disable swap files
set noswapfile

" create backup copies so undo persists between sessions
set backupcopy=yes

" Vundle settings
set nocompatible
filetype off

" set the runtime path to include Vundle and initialize
set rtp+=C:/users/preese/.vim/bundle/Vundle.vim/
let path='C:/users/preese/.vim/bundle'
call vundle#begin(path)
" let Vundle manage Vundle, required
Plugin 'gmarik/Vundle.vim'
" Keep plugin commands between vundle#begin/end.
Plugin 'altercation/vim-colors-solarized'
Plugin 'Shutnik/jshint2.vim'
Plugin 'scrooloose/nerdcommenter'
Plugin 'bling/vim-airline'
Plugin 'nathanaelkane/vim-indent-guides'
Plugin 'tpope/vim-sensible'
Plugin 'groenewege/vim-less'
Plugin 'othree/yajs.vim'
Plugin 'kien/ctrlp.vim'
Plugin 'mbbill/undotree'
Plugin 'Raimondi/delimitMate'
Plugin 'tpope/vim-fugitive'
Plugin 'elzr/vim-json'
Plugin 'mhinz/vim-signify'
Plugin 'ap/vim-css-color'
Plugin 'KabbAmine/zeavim.vim'
Plugin 'editorconfig/editorconfig-vim'
Plugin 'tpope/vim-jdaddy' " JSON manipulation/pretty printing
Plugin 'tpope/vim-markdown'
Plugin 'briancollins/vim-jst' " template syntax highlighting
Plugin 'tpope/vim-vinegar' " enhanced netrw
Plugin 'drmikehenry/vim-fontsize' " adjust font size <leader><leader>+/-
Plugin 'pangloss/vim-javascript'
Plugin 'mxw/vim-jsx'

" All plugins must be added before the following line
call vundle#end()
filetype plugin indent on

" tab labels
set showtabline=2 " always show tabs in gvim, but not vim
" set up tab labels with tab number, buffer name, number of windows
function! GuiTabLabel()
  let label = ''
  let bufnrlist = tabpagebuflist(v:lnum)
  " Add '+' if one of the buffers in the tab page is modified
  for bufnr in bufnrlist
    if getbufvar(bufnr, "&modified")
      let label = '+'
      break
    endif
  endfor
  " Append the tab number
  let label .= v:lnum.': '
  " Append the buffer name
  let name = bufname(bufnrlist[tabpagewinnr(v:lnum) - 1])
  if name == ''
    " give a name to no-name documents
    if &buftype=='quickfix'
      let name = '[Quickfix List]'
    else
      let name = '[No Name]'
    endif
  else
    " get only the file name
    let name = fnamemodify(name,":t")
  endif
  let label .= name
  " Append the number of windows in the tab page
  let wincount = tabpagewinnr(v:lnum, '$')
  return label . '  [' . wincount . ']'
endfunction
set guitablabel=%{GuiTabLabel()}

" set current workspace to :Explore
map <F2> :cd %:p:h

" Toggle undotree
nnoremap <F5> :UndotreeToggle<CR>

if has("persistent_undo")
    set undodir=C:\users\preese\.vim\undo
    set undofile
endif

    " remove whitespace
    map <F10> :%s/\s\+$//

    " closetag filetypes
    let g:closetag_filenames = "*.html,*.html,*.ejs,*.cshtml,*.xml"

    " delimitMate binding
    imap <C-c> <CR><Esc>O

    " vim-json - disable double-quote concealing
    let g:vim_json_syntax_conceal = 0

    set lines=50 columns=100
    set number

" Fonts
"set guifont=Lucida_Sans_Typewriter:h10:cANSI
set guifont=Consolas:h12

    set encoding=utf-8
    set fileencodings=utf-8

    set linespace=2

" Color scheme
if has("gui_running")
	colorscheme solarized
endif

    " js library syntax
    let g:used_javascript_libs = "underscore,backbone,jquery"

	" airline customizations
	let g:airline#extensions#tabline#left_sep = ' '
	let g:airline#extensions#tabline#left_alt_sep = '|'
	let g:airline#extensions#tabline#enabled = 1
	let g:airline#extensions#tabline#buffer_nr_show = 1

    " jsDoc.vim configuration
    let g:jsdoc_allow_input_prompt = 1 " allow prompt for interactive input
    let g:jsdoc_input_description = 1 " prompt for function description
    let g:jsdoc_access_descriptions = 2
    let g:jsdoc_underscore_private = 1 " detect underscore starting functions as private
    let g:jsdoc_additional_descriptions = 1 " add @name and @function

    nmap <silent> <C-l> <Plug>(jsdoc)

    " tab settings
    " show existing tab with 4 spaces width
    set tabstop=4
    " when indenting with '>', use 4 spaces width
    set shiftwidth=4
    set softtabstop=4
    " On pressing tab, insert 4 spaces
    set expandtab

    " caseless searching
    set ignorecase

    set listchars=eol:$,tab:>-,trail:~,extends:>,precedes:<

    " vim-signify
    let g:signify_vcs_list = [ 'git' ]

" alias repos folder
let $repos = "C:\\users\\preese\\repos"
